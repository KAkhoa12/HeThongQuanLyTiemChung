import React, { useState, useEffect } from 'react';
import { getAllServicesNoPage, getAllServiceTypesNoPage } from '../../../services/service.service';
import serviceVaccineService, {
  ServiceVaccineDto,
} from '../../../services/serviceVaccine.service';
import { Service, ServiceType } from '../../../types/service.types';
import { useCart } from '../../../hooks/useCart';
import ServiceDetailModal from '../../../components/Service/ServiceDetailModal';
import { useToast } from '../../../hooks/useToast';

interface ServiceWithVaccines extends Service {
  vaccines: ServiceVaccineDto[];
}

const ServiceVaccineListPage: React.FC = () => {
  const [services, setServices] = useState<ServiceWithVaccines[]>([]);
  const [serviceTypes, setServiceTypes] = useState<ServiceType[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedServiceType, setSelectedServiceType] = useState<string>('all');
  const [selectedService, setSelectedService] = useState<ServiceWithVaccines | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  const { addToCart } = useCart();
  const { showSuccess, showError } = useToast();

  useEffect(() => {
    fetchServicesWithVaccines();
    fetchServiceTypes();
  }, []);

  const fetchServicesWithVaccines = async () => {
    try {
      setLoading(true);

      console.log('Fetching services...');
      const servicesResponse = await getAllServicesNoPage();
      console.log('Services response:', servicesResponse);

      if (!servicesResponse || servicesResponse.length === 0) {
        console.log('No services found');
        setServices([]);
        return;
      }

      // Fetch vaccines for each service
      const servicesWithVaccines = await Promise.all(
        servicesResponse.map(async (service: Service) => {
          console.log(
            `Fetching vaccines for service ${service.id} (${service.name})`,
          );
          try {
            const vaccines = await serviceVaccineService.getByServiceId(
              service.id,
            );
            console.log(`Vaccines for service ${service.id}:`, vaccines);
            return {
              ...service,
              vaccines: vaccines || [],
            };
          } catch (error) {
            console.error(
              `Failed to fetch vaccines for service ${service.id}:`,
              error,
            );
            return {
              ...service,
              vaccines: [],
            };
          }
        }),
      );

      console.log('Final services with vaccines:', servicesWithVaccines);
      setServices(servicesWithVaccines);
    } catch (error) {
      console.error('Failed to fetch services with vaccines:', error);
      showError('L·ªói t·∫£i d·ªØ li·ªáu', 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setLoading(false);
    }
  };

  const filteredServices = services.filter((service) => {
    const matchesSearch =
      service.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      service.description?.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesType =
      selectedServiceType === 'all' ||
      service.serviceTypeId === selectedServiceType;

    return matchesSearch && matchesType;
  });

  const fetchServiceTypes = async () => {
    try {
      const types = await getAllServiceTypesNoPage();
      setServiceTypes(types || []);
    } catch (error) {
      console.error('Failed to fetch service types:', error);
      setServiceTypes([]);
      showError('L·ªói t·∫£i d·ªØ li·ªáu', 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch lo·∫°i d·ªãch v·ª•. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  const getServiceTypeName = (typeId: string | undefined) => {
    if (!typeId) return 'Kh√°c';
    const serviceType = serviceTypes.find(type => type.id === typeId);
    return serviceType ? serviceType.name : 'Kh√°c';
  };

  const handleAddToCart = (service: Service) => {
    addToCart(service);
    
    // Show success toast notification
    showSuccess('Th√†nh c√¥ng', `ƒê√£ th√™m "${service.name}" v√†o gi·ªè h√†ng!`);
  };

  const handleShowDetail = (service: ServiceWithVaccines) => {
    setSelectedService(service);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedService(null);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="container mx-auto px-4 py-20">
          <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600"></div>
            <p className="mt-4 text-xl text-gray-600">
              ƒêang t·∫£i danh s√°ch d·ªãch v·ª•...
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold mb-6">D·ªãch V·ª• & Vaccine</h1>
          <p className="text-xl text-blue-100 max-w-3xl mx-auto">
            Kh√°m ph√° c√°c d·ªãch v·ª• ti√™m ch·ªßng ch·∫•t l∆∞·ª£ng cao v·ªõi vaccine ƒë·∫°t chu·∫©n
            qu·ªëc t·∫ø. Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn s·ª± an to√†n v√† hi·ªáu qu·∫£ t·ªëi ∆∞u
            cho s·ª©c kh·ªèe c·ªßa b·∫°n.
          </p>
        </div>
      </div>

      {/* Search and Filter Section */}
      <div className="container mx-auto px-4 py-12">
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-12">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Search */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                T√¨m ki·∫øm d·ªãch v·ª•
              </label>
              <input
                type="text"
                placeholder="Nh·∫≠p t√™n d·ªãch v·ª• ho·∫∑c m√¥ t·∫£..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
              />
            </div>

            {/* Service Type Filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Lo·∫°i d·ªãch v·ª•
              </label>
              <select
                value={selectedServiceType}
                onChange={(e) => setSelectedServiceType(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
              >
                <option value="all">T·∫•t c·∫£ lo·∫°i d·ªãch v·ª•</option>
                {serviceTypes.map((type) => (
                  <option key={type.id} value={type.id}>
                    {type.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Services Grid */}
        {filteredServices.length === 0 ? (
          <div className="text-center py-20">
            <div className="text-gray-400 text-8xl mb-6">üîç</div>
            <h3 className="text-2xl font-bold text-gray-800 mb-4">
              {searchTerm || selectedServiceType !== 'all'
                ? 'Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• n√†o'
                : 'Ch∆∞a c√≥ d·ªãch v·ª• n√†o'}
            </h3>
            <p className="text-gray-600 text-lg">
              {searchTerm || selectedServiceType !== 'all'
                ? 'Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c lo·∫°i d·ªãch v·ª•'
                : 'H·ªá th·ªëng ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t, vui l√≤ng quay l·∫°i sau'}
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8">
            {filteredServices.map((service) => (
              <div
                key={service.id}
                className="bg-white rounded-2xl shadow-xl overflow-hidden hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2"
              >
                {/* Service Header */}
                <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-6 text-white">
                  <div className="flex items-center justify-between mb-4">
                    <span className="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm font-medium">
                      {getServiceTypeName(service.serviceTypeId)}
                    </span>
                    <div className="text-2xl">üíâ</div>
                  </div>
                  <h3 className="text-2xl font-bold mb-2">{service.name}</h3>
                  {service.description && (
                    <p className="text-blue-100 text-sm line-clamp-2">
                      {service.description}
                    </p>
                  )}
                </div>

                {/* Service Details */}
                <div className="p-6">
                  {/* Price */}
                  <div className="mb-6">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600 text-sm">
                        Gi√° d·ªãch v·ª•:
                      </span>
                      <span className="text-2xl font-bold text-green-600">
                        {service.price
                          ? `${service.price.toLocaleString('vi-VN')} VNƒê`
                          : 'Li√™n h·ªá'}
                      </span>
                    </div>
                  </div>

                  {/* Vaccines Section */}
                  <div className="mb-6">
                    <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                      <span className="text-blue-600 mr-2">ü¶†</span>
                      D·ªãch v·ª• ƒë√≠nh k√®m
                    </h4>

                    {service.vaccines.length === 0 ? (
                      <div className="text-center py-4 bg-gray-50 rounded-lg">
                        <p className="text-gray-500 text-sm">
                          Ch∆∞a c√≥ d·ªãch v·ª• ƒë√≠nh k√®m n√†o
                        </p>
                      </div>
                    ) : (
                      <ul className="list-disc list-inside space-y-1 text-sm text-gray-700 pl-4">
                        {service.vaccines.slice(0, 5).map((vaccine) => (
                          <li key={vaccine.maVaccine}>
                            Vaccine: {vaccine.tenVaccine} - S·ªë m≈©i: {vaccine.soMuiChuan}
                          </li>
                        ))}
                        {service.vaccines.length > 5 && (
                          <li className="text-blue-600 cursor-pointer font-medium">
                            ...Xem th√™m
                          </li>
                        )}
                      </ul>
                    )}
                  </div>
                  <div className="flex space-x-3">
                    <button 
                      onClick={() => handleAddToCart(service)}
                      className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center"
                    >
                      <span className="mr-2">üõí</span>
                      Mua d·ªãch v·ª•
                    </button>
                    <button 
                      onClick={() => handleShowDetail(service)}
                      className="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 px-4 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center"
                    >
                      <span className="mr-2">‚ÑπÔ∏è</span>
                      Chi ti·∫øt
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Statistics Section */}
        <div className="mt-20 bg-white rounded-2xl shadow-xl p-8">
          <h2 className="text-3xl font-bold text-center text-gray-800 mb-12">
            Th·ªëng k√™ d·ªãch v·ª• c·ªßa ch√∫ng t√¥i
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div className="text-center">
              <div className="text-4xl font-bold text-blue-600 mb-2">
                {services.length}
              </div>
              <div className="text-gray-600">D·ªãch v·ª• ƒëang cung c·∫•p</div>
            </div>
            <div className="text-center">
              <div className="text-4xl font-bold text-green-600 mb-2">
                {services.reduce(
                  (total, service) => total + service.vaccines.length,
                  0,
                )}
              </div>
              <div className="text-gray-600">Li√™n k·∫øt d·ªãch v·ª•-vaccine</div>
            </div>
            <div className="text-center">
              <div className="text-4xl font-bold text-purple-600 mb-2">
                {services.length}
              </div>
              <div className="text-gray-600">D·ªãch v·ª• ho·∫°t ƒë·ªông</div>
            </div>
            <div className="text-center">
              <div className="text-4xl font-bold text-orange-600 mb-2">
                100%
              </div>
              <div className="text-gray-600">Ch·∫•t l∆∞·ª£ng ƒë·∫£m b·∫£o</div>
            </div>
          </div>
        </div>

        {/* Call to Action */}
        <div className="mt-20 text-center">
          <div className="bg-gradient-to-r from-blue-600  to-purple-600 rounded-2xl p-12 text-white">
            <h2 className="text-4xl font-bold mb-6">
              S·∫µn s√†ng b·∫£o v·ªá s·ª©c kh·ªèe c·ªßa b·∫°n?
            </h2>
            <p className="text-xl text-blue-100 mb-8 max-w-2xl mx-auto">
              H√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† ƒë·∫∑t l·ªãch ti√™m ch·ªßng
              ngay h√¥m nay!
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button className="bg-white text-blue-600 hover:bg-gray-100 px-8 py-4 rounded-lg font-bold text-lg transition-colors duration-200">
                üìû Li√™n h·ªá ngay
              </button>
              <button className="border-2 border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 rounded-lg font-bold text-lg transition-colors duration-200">
                üìã ƒê·∫∑t l·ªãch online
              </button>
            </div>
          </div>
                 </div>
       </div>

       {/* Service Detail Modal */}
       <ServiceDetailModal
         service={selectedService}
         isOpen={isModalOpen}
         onClose={handleCloseModal}
         onAddToCart={handleAddToCart}
       />
     </div>
   );
 };

export default ServiceVaccineListPage;
