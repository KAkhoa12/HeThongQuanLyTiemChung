import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';

import { FaCheckCircle, FaTimesCircle, FaSpinner, FaHome, FaReceipt, FaWhatsapp } from 'react-icons/fa';
import { updateOrderStatus, updateOrderDiscount } from '../../services/order.service';
import { createDonHangKhuyenMai } from '../../services/donHangKhuyenMai.service';
import { useToast } from '../../hooks';

interface PaymentResult {
  partnerCode: string;
  orderId: string;
  requestId: string;
  amount: string;
  orderInfo: string;
  orderType: string;
  transId: string;
  resultCode: string;
  message: string;
  payType: string;
  responseTime: string;
  extraData: string;
  signature: string;
  promotionCode?: string;
  discountAmount?: string;
}

const PaymentSuccessPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [paymentResult, setPaymentResult] = useState<PaymentResult | null>(null);
  const [loading, setLoading] = useState(true);
  const [isSuccess, setIsSuccess] = useState(false);
  const [hasProcessed, setHasProcessed] = useState(false); // ‚úÖ Flag ƒë·ªÉ tr√°nh g·ªçi API 2 l·∫ßn
  const { showSuccess, showError, showWarning } = useToast();
  
  useEffect(() => {
    // ‚úÖ Ch·ªâ g·ªçi 1 l·∫ßn duy nh·∫•t khi component mount
    if (!hasProcessed) {
      setHasProcessed(true);
      processPaymentResult();
    }
  }, [hasProcessed]);

  const processPaymentResult = async () => {
    try {
      console.log('üîÑ [PaymentSuccessPage] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n...');
      
      // L·∫•y th√¥ng tin t·ª´ URL params
      const result: PaymentResult = {
        partnerCode: searchParams.get('partnerCode') || '',
        orderId: searchParams.get('orderId') || '',
        requestId: searchParams.get('requestId') || '',
        amount: searchParams.get('amount') || '',
        orderInfo: searchParams.get('orderInfo') || '',
        orderType: searchParams.get('orderType') || '',
        transId: searchParams.get('transId') || '',
        resultCode: searchParams.get('resultCode') || '',
        message: searchParams.get('message') || '',
        payType: searchParams.get('payType') || '',
        responseTime: searchParams.get('responseTime') || '',
        extraData: searchParams.get('extraData') || '',
        signature: searchParams.get('signature') || '',
        // ‚úÖ B·ªé 2 d√≤ng n√†y - ch·ªâ l·∫•y t·ª´ extraData ƒë·ªÉ tr√°nh g·ªçi API 2 l·∫ßn
        // promotionCode: searchParams.get('promotionCode') || undefined,
        // discountAmount: searchParams.get('discountAmount') || undefined
      };

          // ‚úÖ CH·ªà l·∫•y th√¥ng tin khuy·∫øn m√£i t·ª´ extraData c·ªßa MoMo ƒë·ªÉ tr√°nh g·ªçi API 2 l·∫ßn
    // extraData ch·ª©a th√¥ng tin khuy·∫øn m√£i ƒë∆∞·ª£c g·ª≠i t·ª´ CheckoutPage khi t·∫°o thanh to√°n
    const extraData = searchParams.get('extraData') || '';
    if (extraData) {
      try {
        const extraDataParams = new URLSearchParams(extraData);
        const promoCode = extraDataParams.get('promotionCode');
        const discountAmt = extraDataParams.get('discountAmount');
        
        if (promoCode && discountAmt) {
          result.promotionCode = promoCode;
          result.discountAmount = discountAmt;
          console.log('‚úÖ L·∫•y th√¥ng tin khuy·∫øn m√£i t·ª´ extraData:', { promoCode, discountAmt });
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω extraData:', error);
      }
    }

      setPaymentResult(result);

      // Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n
      const success = result.resultCode === '0';
      setIsSuccess(success);

      // N·∫øu thanh to√°n th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng v√† t·∫°o DonHangKhuyenMai
      if (success) {
        try {
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "PAID"
          // S·ª≠ d·ª•ng orderId t·ª´ URL params (ƒë√¢y l√† maDonHang t·ª´ database)
          await updateOrderStatus(result.orderId, "PAID");
          showSuccess('Th√†nh c√¥ng','Thanh to√°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t! üéâ');
          
          // ‚úÖ C·∫≠p nh·∫≠t s·ªë ti·ªÅn ƒë∆∞·ª£c gi·∫£m trong DonHang n·∫øu c√≥ khuy·∫øn m√£i
          if (result.promotionCode && result.discountAmount) {
            try {
              const discountAmount = parseFloat(result.discountAmount);
              console.log('üîÑ C·∫≠p nh·∫≠t s·ªë ti·ªÅn gi·∫£m trong ƒë∆°n h√†ng:', discountAmount);
              
              // G·ªçi API c·∫≠p nh·∫≠t s·ªë ti·ªÅn gi·∫£m trong DonHang
              await updateOrderDiscount(result.orderId, discountAmount);
              
              console.log('‚úÖ C·∫≠p nh·∫≠t s·ªë ti·ªÅn gi·∫£m th√†nh c√¥ng!');
            } catch (discountError) {
              console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë ti·ªÅn gi·∫£m:', discountError);
              showWarning('L·ªói','Thanh to√°n th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë ti·ªÅn gi·∫£m');
            }
          }
          
                  // ‚úÖ CH·ªà t·∫°o DonHangKhuyenMai 1 l·∫ßn n·∫øu c√≥ th√¥ng tin khuy·∫øn m√£i t·ª´ extraData
        if (result.promotionCode && result.discountAmount) {
          try {
            console.log('üîÑ B·∫Øt ƒë·∫ßu t·∫°o b·∫£n ghi DonHangKhuyenMai:', {
              maDonHang: result.orderId,
              maKhuyenMai: result.promotionCode,
              giamGia: result.discountAmount
            });
            
            const discountAmount = parseFloat(result.discountAmount);
            await createDonHangKhuyenMai({
              maDonHang: result.orderId,
              maKhuyenMai: result.promotionCode,
              giamGiaGoc: discountAmount,
              giamGiaThucTe: discountAmount
            });
            
            console.log('‚úÖ T·∫°o b·∫£n ghi DonHangKhuyenMai th√†nh c√¥ng!');
            showSuccess('Th√†nh c√¥ng','ƒê√£ ghi nh·∫≠n vi·ªác s·ª≠ d·ª•ng m√£ khuy·∫øn m√£i! üéÅ');
          } catch (promotionError) {
            console.error('‚ùå L·ªói khi t·∫°o b·∫£n ghi khuy·∫øn m√£i:', promotionError);
            showWarning('L·ªói','Thanh to√°n th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ ghi nh·∫≠n m√£ khuy·∫øn m√£i');
          }
        } else {
          console.log('‚ÑπÔ∏è Kh√¥ng c√≥ th√¥ng tin khuy·∫øn m√£i, b·ªè qua vi·ªác t·∫°o DonHangKhuyenMai');
        }
          
          // Clear cart sau khi thanh to√°n th√†nh c√¥ng
          localStorage.removeItem('vaccineCart');
        } catch (updateError) {
          console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:', updateError);
          showWarning('L·ªói','Thanh to√°n th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng');
        }
      } else { 
        showError('L·ªói','Thanh to√°n th·∫•t b·∫°i: ' + result.message);
      }
 
      setLoading(false);
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n:', error);
      showError('L·ªói','C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n');
      setLoading(false);
    }
  };

  const formatAmount = (amount: string) => {
    const numAmount = parseInt(amount);
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(numAmount);
  };

  const formatDateTime = (timestamp: string) => {
    const date = new Date(parseInt(timestamp));
    return date.toLocaleString('vi-VN');
  };

  const handleGoHome = () => {
    navigate('/');
  };

  const handleViewOrder = () => {
    // Chuy·ªÉn ƒë·∫øn trang chi ti·∫øt ƒë∆°n h√†ng
    if (paymentResult?.orderId) {
      navigate(`/dashboard/invoices/${paymentResult.orderId}`);
    } else {
      navigate('/dashboard/invoices');
    }
  };

  const handleContactSupport = () => {
    // TODO: M·ªü chat ho·∫∑c g·ªçi ƒëi·ªán h·ªó tr·ª£
    window.open('https://wa.me/84901234567', '_blank');
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <FaSpinner className="inline-block animate-spin text-6xl text-blue-600 mb-4" />
          <p className="text-xl text-gray-600">ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white py-16">
        <div className="container mx-auto px-4 text-center">
          {isSuccess ? (
            <>
              <FaCheckCircle className="inline-block text-8xl mb-4 text-green-300" />
              <h1 className="text-5xl font-bold mb-4">üéâ Thanh To√°n Th√†nh C√¥ng!</h1>
              <p className="text-xl text-blue-100">
                C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i
              </p>
            </>
          ) : (
            <>
              <FaTimesCircle className="inline-block text-8xl mb-4 text-red-300" />
              <h1 className="text-5xl font-bold mb-4">‚ùå Thanh To√°n Th·∫•t B·∫°i</h1>
              <p className="text-xl text-blue-100">
                ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n
              </p>
            </>
          )}
        </div>
      </div>

      <div className="container mx-auto px-4 py-12">
        {/* Payment Result Card */}
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-800 mb-4">
                {isSuccess ? 'Th√¥ng Tin Thanh To√°n' : 'Chi Ti·∫øt L·ªói'}
              </h2>
              <div className={`inline-flex items-center px-6 py-3 rounded-full text-lg font-semibold ${
                isSuccess 
                  ? 'bg-green-100 text-green-800' 
                  : 'bg-red-100 text-red-800'
              }`}>
                {isSuccess ? (
                  <>
                    <FaCheckCircle className="mr-2" />
                    Giao d·ªãch th√†nh c√¥ng
                  </>
                ) : (
                  <>
                    <FaTimesCircle className="mr-2" />
                    Giao d·ªãch th·∫•t b·∫°i
                  </>
                )}
              </div>
            </div>

            {/* Payment Details */}
            <div className="grid md:grid-cols-2 gap-8">
              {/* Left Column - Basic Info */}
              <div className="space-y-6">
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-xl font-semibold text-gray-800 mb-4">Th√¥ng Tin ƒê∆°n H√†ng</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                      <span className="font-semibold text-gray-800">{paymentResult?.orderId}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">S·ªë ti·ªÅn:</span>
                      <span className="font-semibold text-blue-600 text-lg">
                        {formatAmount(paymentResult?.amount || '0')}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Ph∆∞∆°ng th·ª©c:</span>
                      <span className="font-semibold text-gray-800 capitalize">
                        {paymentResult?.orderType?.replace('_', ' ')}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Th·ªùi gian:</span>
                      <span className="font-semibold text-gray-800">
                        {formatDateTime(paymentResult?.responseTime || '0')}
                      </span>
                    </div>
                  </div>
                </div>

                {isSuccess && (
                  <div className="bg-green-50 rounded-lg p-6 border border-green-200">
                    <h3 className="text-xl font-semibold text-green-800 mb-4">‚úÖ X√°c Nh·∫≠n</h3>
                    <p className="text-green-700">
                      ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† <strong>tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh "ƒê√£ Thanh To√°n"</strong>.
                      Ch√∫ng t√¥i s·∫Ω g·ª≠i email x√°c nh·∫≠n v√† li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ s·∫Øp x·∫øp l·ªãch h·∫πn.
                    </p>
                  </div>
                )}
              </div>

              {/* Right Column - Technical Details */}
              <div className="space-y-6">
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-xl font-semibold text-gray-800 mb-4">Chi Ti·∫øt K·ªπ Thu·∫≠t</h3>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Partner Code:</span>
                      <span className="font-mono text-gray-800">{paymentResult?.partnerCode}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Request ID:</span>
                      <span className="font-mono text-gray-800">{paymentResult?.requestId}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Transaction ID:</span>
                      <span className="font-mono text-gray-800">{paymentResult?.transId}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Result Code:</span>
                      <span className={`font-mono font-semibold ${
                        paymentResult?.resultCode === '0' ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {paymentResult?.resultCode}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Pay Type:</span>
                      <span className="font-mono text-gray-800 capitalize">
                        {paymentResult?.payType}
                      </span>
                    </div>
                  </div>
                </div>

                {!isSuccess && (
                  <div className="bg-red-50 rounded-lg p-6 border border-red-200">
                    <h3 className="text-xl font-semibold text-red-800 mb-4">‚ùå Th√¥ng B√°o L·ªói</h3>
                    <p className="text-red-700 mb-4">
                      {paymentResult?.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n.'}
                    </p>
                    <p className="text-red-600 text-sm">
                      Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c th·ª≠ l·∫°i sau.
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Order Info */}
            {paymentResult?.orderInfo && (
              <div className="mt-8 bg-blue-50 rounded-lg p-6 border border-blue-200">
                <h3 className="text-xl font-semibold text-blue-800 mb-4">üìã Th√¥ng Tin ƒê∆°n H√†ng</h3>
                <p className="text-blue-700">{paymentResult.orderInfo}</p>
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={handleGoHome}
              className="flex items-center justify-center px-8 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold text-lg"
            >
              <FaHome className="mr-2" />
              V·ªÅ Trang Ch·ªß
            </button>

            {isSuccess && (
              <button
                onClick={handleViewOrder}
                className="flex items-center justify-center px-8 py-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-semibold text-lg"
              >
                <FaReceipt className="mr-2" />
                Xem ƒê∆°n H√†ng
              </button>
            )}

            <button
              onClick={handleContactSupport}
              className="flex items-center justify-center px-8 py-4 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors font-semibold text-lg"
            >
              <FaWhatsapp className="mr-2" />
              Li√™n H·ªá H·ªó Tr·ª£
            </button>
          </div>

          {/* Additional Info */}
          <div className="mt-12 text-center text-gray-600">
            <p className="mb-2">
              N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i:
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center text-sm">
              <span>üìß Email: support@huitkit.com</span>
              <span>üìû Hotline: 1900-xxxx</span>
              <span>üïí Gi·ªù l√†m vi·ªác: 8:00 - 18:00 (Th·ª© 2 - Th·ª© 7)</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentSuccessPage; 